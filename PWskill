Que\tion 1 : User Management Backend 0ith Express and MongoDB

Ans => User management backend with Express and MongoDB involves creating a server-side application that handles user data and authentication. Hereâ€™s a brief overview:

1. Set Up: Install Express and Mongoose using npm.

npm install express mongoose

2. Initialize Express: Create an Express application.


const express = require('express');
const app = express();
app.use(express.json());

3. Connect to MongoDB: Use Mongoose to connect to MongoDB.


const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/userdb', { useNewUrlParser: true, useUnifiedTopology: true });

4. Define User Schema and Model: Create a Mongoose schema and model for users.

const userSchema = new mongoose.Schema({
    username: String,
    password: String,
    email: String
});
const User = mongoose.model('User', userSchema);

5. Create Routes:

Register User:

app.post('/register', async (req, res) => {
    const newUser = new User(req.body);
    await newUser.save();
    res.status(201).send('User registered');
});
Login User:

app.post('/login', async (req, res) => {
    const user = await User.findOne({ username: req.body.username, password: req.body.password });
    if (user) {
        res.status(200).send('Login successful');
    } else {
        res.status(401).send('Invalid credentials');
    }
});
Get User:


app.get('/user/:id', async (req, res) => {
    const user = await User.findById(req.params.id);
    res.status(200).json(user);
});
6. Start Server:

app.listen(3000, () => {
    console.log('Server running on port 3000');
});
This setup allows you to manage user registration, login, and retrieval using Express for handling HTTP requests and MongoDB for storing user data.







